//=============================================================================
// ■ BIOS.cpp
//-----------------------------------------------------------------------------
//   ASM76固件BIOS。
//=============================================================================

#include "ASM76.hpp"

namespace ASM76 {
	//-------------------------------------------------------------------------
	// ● BIOS mutex锁
	//-------------------------------------------------------------------------
	mutex bios_lock;

	//-------------------------------------------------------------------------
	// ● BIOS空回调
	//-------------------------------------------------------------------------
	static uint32_t NULL_Call(uint8_t* d) {
		// 返回输入值与0x76ABCDEF的异或值并取反
		// 程序*可以*使用这种方式校验，虽然没卵用（
		return ~(((uintptr_t) d & 0xFFFFFF) ^ 0x76ABCDEF);
	}

	//-------------------------------------------------------------------------
	// ● 构造
	//-------------------------------------------------------------------------
	BIOS::BIOS(size_t function_table_count) {
		function_table = new BIOS_call[function_table_count];

		// 用固定NULL回调填充
		for (size_t i = 0; i < function_table_count; i++) {
			function_table[i] = &NULL_Call;
		}

		// 自我校验
		if (call(0, (uint8_t*) 0x76) != 0x89543266) {
			printf("Error: VM BIOS self test failed!");
			exit(76);
		}
	}

	//-------------------------------------------------------------------------
	// ● 销毁
	//-------------------------------------------------------------------------
	BIOS::~BIOS() {
		delete[] function_table;
	}

	//-------------------------------------------------------------------------
	// ● 调用
	//-------------------------------------------------------------------------	
	uint32_t BIOS::call(int fid, uint8_t* d) {
		// Lock will release after function called
		lock_guard<mutex> lock(bios_lock);
		return function_table[fid](d);
	}

}
