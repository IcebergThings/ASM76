//=============================================================================
// ■ VBinaryFileWriter.hpp
//-----------------------------------------------------------------------------
//   在各计算机之间兼容的二进制文件写出类。（Little-endian）
//=============================================================================

#define ERROR_MESSAGE "error: lorem ipsum"

class BinaryFileWriter {
public:
	//-------------------------------------------------------------------------
	// ● 成员
	//-------------------------------------------------------------------------
	FILE* f;
	//-------------------------------------------------------------------------
	// ● 构造
	//-------------------------------------------------------------------------
	BinaryFileWriter(const char* filename) {
		f = fopen(filename, "wb");
	}
	//-------------------------------------------------------------------------
	// ● 析构
	//-------------------------------------------------------------------------
	~BinaryFileWriter() {
		fclose(f);
	}
	//-------------------------------------------------------------------------
	// ● 直接写入
	//-------------------------------------------------------------------------
		template <class T> void write_directly(T value) {
			if (fwrite(&value, sizeof(T), 1, f) < 1) error("write_directly");
		}
	//-------------------------------------------------------------------------
	// ● 写入1字节int
	//-------------------------------------------------------------------------
	void write_i8(int8_t value) {
		write_u8((uint8_t) value);
	}
	//-------------------------------------------------------------------------
	// ● 写入2字节int
	//-------------------------------------------------------------------------
	#define WRITE_CHAR \
		if (fputc(value & 0xff, f) < 0) error(ERROR_MESSAGE)
	#define WRITE_CHAR_ \
		if (fputc((value >>= 8) & 0xff, f) < 0) error(ERROR_MESSAGE)
	void write_i16(int16_t value) {
		if (is_little_endian()) {
			write_directly(value);
		} else {
			WRITE_CHAR;
			WRITE_CHAR_;
		}
	}
	//-------------------------------------------------------------------------
	// ● 写入4字节int
	//-------------------------------------------------------------------------
	void write_i32(int32_t value) {
		if (is_little_endian()) {
			write_directly(value);
		} else {
			WRITE_CHAR;
			WRITE_CHAR_;
			WRITE_CHAR_;
			WRITE_CHAR_;
		}
	}
	//-------------------------------------------------------------------------
	// ● 写入8字节int
	//-------------------------------------------------------------------------
	void write_i64(int64_t value) {
		if (is_little_endian()) {
			write_directly(value);
		} else {
			WRITE_CHAR;
			WRITE_CHAR_;
			WRITE_CHAR_;
			WRITE_CHAR_;
			WRITE_CHAR_;
			WRITE_CHAR_;
			WRITE_CHAR_;
			WRITE_CHAR_;
		}
	}
	#undef WRITE_CHAR
	#undef WRITE_CHAR_
	//-------------------------------------------------------------------------
	// ● 写入1字节unsigned
	//-------------------------------------------------------------------------
	void write_u8(uint8_t value) {
		if (fputc(value, f) < 0) error(ERROR_MESSAGE);
	}
	//-------------------------------------------------------------------------
	// ● 写入2字节unsigned
	//-------------------------------------------------------------------------
	void write_u16(uint16_t value) {
		write_i16((int16_t) value);
	}
	//-------------------------------------------------------------------------
	// ● 写入4字节unsigned
	//-------------------------------------------------------------------------
	void write_u32(uint32_t value) {
		write_i32((int32_t) value);
	}
	//-------------------------------------------------------------------------
	// ● 写入8字节unsigned
	//-------------------------------------------------------------------------
	void write_u64(uint64_t value) {
		write_i64((int64_t) value);
	}
	//-------------------------------------------------------------------------
	// ● 写入4字节float
	//-------------------------------------------------------------------------
	void write_float(float value) {
		write_directly<float>(value);
	}
	//-------------------------------------------------------------------------
	// ● 写入8字节double
	//-------------------------------------------------------------------------
	void write_double(double value) {
		write_directly<double>(value);
	}
};

#undef ERROR_MESSAGE
